---
# This is an example playbook to execute goss tests.
# Tests need distributed to the appropriate ansible host/groups
# prior to execution by `goss validate`.
#
# The goss ansible module is installed with molecule.  The ANSIBLE_LIBRARY
# path is updated appropriately on `molecule verify`.

# Details about ansible module:
#  - https://github.com/indusbox/goss-ansible

- name: Verify
  hosts: all
  vars:
    goss_version: v0.3.6
    goss_arch: amd64
    goss_dst: /usr/local/bin/goss
    goss_url: "https://github.com/aelsabbahy/goss/releases/download/{{ goss_version }}/goss-linux-{{ goss_arch }}"
    goss_test_directory: /tmp
    goss_format: documentation
    molecule_file: "{{ lookup('env', 'MOLECULE_FILE') }}"
    molecule_yml: "{{ lookup('file', molecule_file) | molecule_from_yaml }}"
    java_open_jdk_version: "{{ molecule_yml.provisioner.inventory.group_vars.openjdk.java_open_jdk_version }}"

  tasks:
    # https://docs.ansible.com/ansible/latest/modules/set_fact_module.html
    - name: Get the simplified major.minor version string
      set_fact:
        version_simple: "{{ kibana.version | regex_replace('^([0-9])\\.([0-9]*).*', '\\1.\\2') }}"

    # https://docs.ansible.com/ansible/latest/modules/include_vars_module.html
    - name: Include defaults for configuration, per the requested version.
      include_vars:
        file: ../../vars/main-{{ version_simple }}.yml

    # http://docs.ansible.com/ansible/latest/set_fact_module.html
    - name: Merge kibana_default and kibana variables
      set_fact:
        kibana_combined: "{{ kibana_defaults | combine(kibana, recursive=True) }}"

    - name: Download and install goss
      get_url:
        url: "{{ goss_url }}"
        dest: "{{ goss_dst }}"
        mode: 0755

    - name: Copy tests to remote
      template:
        src: "{{ item }}"
        dest: "{{ goss_test_directory }}/{{ item | basename }}"
      with_fileglob:
        - "{{ playbook_dir }}/tests/test_*.yml"

    - name: Register test files
      shell: "ls {{ goss_test_directory }}/test_*.yml"
      register: test_files

    - name: Execute Goss tests
      command: "goss -g {{ item }} validate --format {{ goss_format }}"
      register: test_results
      with_items: "{{ test_files.stdout_lines }}"
      ignore_errors: true

    - name: Display details about the goss results
      debug:
        msg: "{{ item.stdout_lines }}"
      with_items: "{{ test_results.results }}"

    - name: Fail when tests fail
      fail:
        msg: "Goss failed to validate"
      when: item.rc != 0
      with_items: "{{ test_results.results }}"
